{"ast":null,"code":"import { createRouter, createWebHashHistory } from 'vue-router';\nimport Login from '../views/Login.vue';\nconst routes = [{\n  path: '/',\n  name: 'home',\n  component: () => import( /* webpackChunkName: \"about\" */'../views/HomeView.vue'),\n  meta: {\n    requiresAuth: true // Add the 'requiresAuth' meta field to the route\n  }\n}, {\n  path: '/Items',\n  name: 'Items',\n  component: () => import( /* webpackChunkName: \"about\" */'../views/Items.vue'),\n  meta: {\n    requiresAuth: true // Add the 'requiresAuth' meta field to the route\n  }\n}, {\n  path: '/Monitor',\n  name: 'Monitor',\n  component: () => import( /* webpackChunkName: \"about\" */'../views/Monitor.vue'),\n  meta: {\n    requiresAuth: true // Add the 'requiresAuth' meta field to the route\n  }\n}, {\n  path: '/about',\n  name: 'about',\n  component: () => import( /* webpackChunkName: \"about\" */'../views/AboutView.vue')\n}, {\n  path: '/login',\n  name: 'login',\n  component: Login\n}];\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes\n});\nrouter.beforeEach((to, from, next) => {\n  // Check if the route requires authentication\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // Check if the bearer token is present\n    //\n    document.title = to.meta.title || 'Manufacturing SCADA';\n    const sessionCookie = document.cookie.replace(/(?:(?:^|.*;\\s*)access_Token\\s*\\=\\s*([^;]*).*$)|^.*$/, '$1');\n    //console.log(sessionCookie);\n    const token = sessionCookie; // Retrieve the token from local storage or any other storage mechanism\n\n    if (token) {\n      // Token exists, allow access to the route\n      next();\n    } else {\n      // Token doesn't exist, redirect to the login page or display an error\n      next('/login');\n    }\n  } else {\n    // Route doesn't require authentication, allow access\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHashHistory","Login","routes","path","name","component","meta","requiresAuth","router","history","beforeEach","to","from","next","matched","some","record","document","title","sessionCookie","cookie","replace","token"],"sources":["D:/Project/VUEJSSPRING_CRUD_JWT/vue-crud-api-jwt-vuex-integrated-with-spring/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHashHistory } from 'vue-router';\nimport Login from '../views/Login.vue';\n\n\nconst routes = [\n  {\n    path: '/',\n    name: 'home',\n    component: () => import(/* webpackChunkName: \"about\" */ '../views/HomeView.vue'),\n    meta: {\n      requiresAuth: true, // Add the 'requiresAuth' meta field to the route\n    },\n  },\n  {\n    path: '/Items',\n    name: 'Items',\n    component: () => import(/* webpackChunkName: \"about\" */ '../views/Items.vue'),\n    meta: {\n      requiresAuth: true, // Add the 'requiresAuth' meta field to the route\n    },\n  },\n\n  {\n    path: '/Monitor',\n    name: 'Monitor',\n    component: () => import(/* webpackChunkName: \"about\" */ '../views/Monitor.vue'),\n    meta: {\n      requiresAuth: true, // Add the 'requiresAuth' meta field to the route\n    },\n  },\n\n\n  {\n    path: '/about',\n    name: 'about',\n    component: () => import(/* webpackChunkName: \"about\" */ '../views/AboutView.vue'),\n  },\n  {\n    path: '/login',\n    name: 'login',\n    component: Login,\n  }\n];\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes,\n});\n\nrouter.beforeEach((to, from, next) => {\n  // Check if the route requires authentication\n  if (to.matched.some((record) => record.meta.requiresAuth)) {\n    // Check if the bearer token is present\n    //\n    document.title = to.meta.title || 'Manufacturing SCADA';\n\n    const sessionCookie = document.cookie.replace(\n      /(?:(?:^|.*;\\s*)access_Token\\s*\\=\\s*([^;]*).*$)|^.*$/,\n      '$1'\n    );\n    //console.log(sessionCookie);\n    const token = sessionCookie; // Retrieve the token from local storage or any other storage mechanism\n\n    if (token) {\n      // Token exists, allow access to the route\n      next();\n    } else {\n      // Token doesn't exist, redirect to the login page or display an error\n      next('/login');\n    }\n  } else {\n    // Route doesn't require authentication, allow access\n    next();\n  }\n});\n\nexport default router;\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,oBAAoB,QAAQ,YAAY;AAC/D,OAAOC,KAAK,MAAM,oBAAoB;AAGtC,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAEA,CAAA,KAAM,MAAM,EAAC,+BAAgC,uBAAuB,CAAC;EAChFC,IAAI,EAAE;IACJC,YAAY,EAAE,IAAI,CAAE;EACtB;AACF,CAAC,EACD;EACEJ,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEA,CAAA,KAAM,MAAM,EAAC,+BAAgC,oBAAoB,CAAC;EAC7EC,IAAI,EAAE;IACJC,YAAY,EAAE,IAAI,CAAE;EACtB;AACF,CAAC,EAED;EACEJ,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,SAAS;EACfC,SAAS,EAAEA,CAAA,KAAM,MAAM,EAAC,+BAAgC,sBAAsB,CAAC;EAC/EC,IAAI,EAAE;IACJC,YAAY,EAAE,IAAI,CAAE;EACtB;AACF,CAAC,EAGD;EACEJ,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEA,CAAA,KAAM,MAAM,EAAC,+BAAgC,wBAAwB;AAClF,CAAC,EACD;EACEF,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEJ;AACb,CAAC,CACF;AAED,MAAMO,MAAM,GAAGT,YAAY,CAAC;EAC1BU,OAAO,EAAET,oBAAoB,CAAC,CAAC;EAC/BE;AACF,CAAC,CAAC;AAEFM,MAAM,CAACE,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC;EACA,IAAIF,EAAE,CAACG,OAAO,CAACC,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACV,IAAI,CAACC,YAAY,CAAC,EAAE;IACzD;IACA;IACAU,QAAQ,CAACC,KAAK,GAAGP,EAAE,CAACL,IAAI,CAACY,KAAK,IAAI,qBAAqB;IAEvD,MAAMC,aAAa,GAAGF,QAAQ,CAACG,MAAM,CAACC,OAAO,CAC3C,qDAAqD,EACrD,IACF,CAAC;IACD;IACA,MAAMC,KAAK,GAAGH,aAAa,CAAC,CAAC;;IAE7B,IAAIG,KAAK,EAAE;MACT;MACAT,IAAI,CAAC,CAAC;IACR,CAAC,MAAM;MACL;MACAA,IAAI,CAAC,QAAQ,CAAC;IAChB;EACF,CAAC,MAAM;IACL;IACAA,IAAI,CAAC,CAAC;EACR;AACF,CAAC,CAAC;AAEF,eAAeL,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}