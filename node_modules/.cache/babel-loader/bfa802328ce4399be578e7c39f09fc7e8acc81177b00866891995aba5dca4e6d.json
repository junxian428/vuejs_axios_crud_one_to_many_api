{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { onMounted, ref } from \"vue\";\nimport axios from \"axios\";\nimport { useRouter } from \"vue-router\";\nimport VueCookies from 'vue-cookies';\nexport default {\n  name: \"Home\",\n  data() {\n    return {\n      formData: {\n        name: \"\",\n        email: \"\"\n        // Add more form fields as needed\n      },\n\n      responseData: null,\n      error: null,\n      successModalVisible: false,\n      userID: 'User123',\n      // Replace 'User123' with your user ID\n      userToken: 'UserToken123',\n      // Replace 'UserToken123' with your user token\n      plcItems: []\n    };\n  },\n  mounted() {\n    // Making a GET request\n    axios.get('http://localhost:8089/plc').then(response => {\n      this.plcItems = response.data;\n      //for (let i = 0; i < response.data.length; i++) {\n      //  console.log(response.data[i].name);\n      // }\n      //console.log(response.data[0].addresses[0]);\n      //console.log(response.data[0].name);\n    }).catch(error => {\n      this.error = error.message;\n    });\n  },\n  methods: {\n    showDeleteConfirmation(plcIndex, addressIndex) {\n      const confirmed = confirm(\"Are you sure you want to delete this address?\");\n      if (confirmed) {\n        this.deleteAddress(plcIndex, addressIndex);\n      }\n    },\n    //\n    saveData() {\n      // Simulate saving data to the server (replace this with your actual API call)\n      // For example, using Axios:\n      // axios.post('/api/saveData', this.formData)\n      //   .then((response) => {\n      //     // Handle success\n      //     this.showSuccessModal();\n      //     // Clear the form data after successful submission\n      //     this.formData = {};\n      //   })\n      //   .catch((error) => {\n      //     // Handle error\n      //   });\n\n      // Simulate success for this example\n      this.showSuccessModal();\n      this.formData = {}; // Clear the form data after successful submission\n    },\n\n    showSuccessModal() {\n      this.successModalVisible = true;\n    },\n    closeSuccessModal() {\n      this.successModalVisible = false;\n    },\n    //\n\n    toggleDropdown(plcIndex) {\n      this.plcItems[plcIndex].showDropdown = !this.plcItems[plcIndex].showDropdown;\n    },\n    deletePLC(plcIndex) {\n      // Get the PLC ID from the PLC object to be deleted\n      const plcIdToDelete = this.plcItems[plcIndex].id;\n\n      // Make the DELETE request using Axios\n      axios.delete(`http://localhost:8089/plc/${plcIdToDelete}`).then(response => {\n        // If the request is successful, remove the PLC item from the array in the frontend\n        this.plcItems.splice(plcIndex, 1);\n      }).catch(error => {\n        // Handle errors if needed\n        console.error('Error deleting PLC:', error);\n      });\n    },\n    addPLC() {\n      if (this.newPLCName.trim() !== '' && this.newPLCToken.trim() !== '') {\n        const isDuplicateToken = this.plcItems.some(plcItem => plcItem.token === this.newPLCToken);\n        if (isDuplicateToken) {\n          alert('Token is already used in another PLC. Please use a different token.');\n          return;\n        }\n\n        // Create the new PLC object\n        const newPLC = {\n          name: this.newPLCName,\n          token: this.newPLCToken,\n          editingToken: false,\n          newToken: '',\n          showDropdown: false,\n          addresses: []\n        };\n\n        // Send a POST request to the server to create the new PLC\n        axios.post('http://localhost:8089/plc', newPLC).then(response => {\n          // Handle success and update the list of PLC items or perform any other actions as required\n          console.log('New PLC added successfully');\n          this.plcItems.push(response.data); // Assuming the server responds with the newly created PLC object\n        }).catch(error => {\n          // Handle error, if needed\n          console.error('Error adding new PLC:', error);\n        });\n        this.newPLCName = '';\n        this.newPLCToken = '';\n      }\n    },\n    async addAddress(plcIndex) {\n      // Create a new address object\n      const newAddress = {\n        name: '',\n        description: ''\n      };\n      try {\n        // Perform the PUT request to update the address array on the server\n        await this.updatePLCAddress(plcIndex, newAddress);\n        console.log('PLC address updated successfully');\n      } catch (error) {\n        // Handle error, if needed\n        console.error('Error updating PLC address:', error);\n      }\n    },\n    async updatePLCAddress(plcIndex, newAddress) {\n      const plc = this.plcItems[plcIndex];\n      try {\n        // First, push the new address to the addresses array of the corresponding PLC\n        //this.plcItems[plcIndex].addresses.push(newAddress);\n\n        // Perform the PUT request to update the address array on the server\n        const response = await axios.post(`http://localhost:8089/address`, {\n          userid: 1,\n          plcid: plcIndex\n        });\n\n        // Optionally, update the local data with the response from the server if needed\n        // this.plcItems[plcIndex].addresses = response.data.addresses;\n\n        console.log('PLC address updated successfully');\n      } catch (error) {\n        console.error('Error updating PLC address:', error);\n        // If there's an error during the PUT request, remove the newly added address from the local data\n        this.plcItems[plcIndex].addresses.pop();\n        throw error; // Re-throw the error to be caught by the calling method (addAddress)\n      }\n    },\n\n    deleteAddress(plcIndex, addressIndex) {\n      // Check if the PLC item exists at plcIndex\n      if (this.plcItems[plcIndex]) {\n        // Get the specified PLC item\n\n        // Make the DELETE request using Axios\n        axios.delete(`http://localhost:8089/address/${addressIndex}`).then(response => {\n          // If the request is successful, remove the PLC item from the array in the frontend\n          plcItem.addresses.splice(addressIndex, 1);\n        }).catch(error => {\n          // Handle errors if needed\n          console.error('Error deleting PLC:', error);\n        });\n\n        //\n\n        // Check if the address exists at addressIndex within the addresses array of the PLC item\n        if (plcItem.addresses && plcItem.addresses.length > addressIndex) {\n          // Remove the address at addressIndex from the addresses array\n          plcItem.addresses.splice(addressIndex, 1);\n        } else {\n          console.error('Invalid addressIndex:', addressIndex);\n        }\n      } else {\n        console.error('Invalid plcIndex:', plcIndex);\n      }\n    },\n    editAddress(address) {\n      address.editing = true;\n    },\n    saveAddress(address) {\n      address.editing = false;\n      this.showSuccessModal();\n    },\n    cancelEdit(address) {\n      address.editing = false;\n    },\n    editPLCToken(plc) {\n      plc.editingToken = true;\n      plc.newToken = plc.token;\n    },\n    savePLCToken(plc) {\n      // Check if the new token is not already used in any other PLC\n      const isDuplicateToken = this.plcItems.some(plcItem => plcItem !== plc && plcItem.token === plc.newToken);\n      if (isDuplicateToken) {\n        // Display an error message or take any action to handle the duplicate token\n        alert('Token is already used in another PLC. Please use a different token.');\n        return;\n      }\n      plc.token = plc.newToken;\n      plc.editingToken = false;\n      plc.newToken = '';\n      this.showSuccessModal();\n    },\n    cancelEditPLCToken(plc) {\n      plc.editingToken = false;\n      plc.newToken = '';\n    },\n    showDeletePLCConfirmation(plcIndex) {\n      const confirmed = confirm(\"Are you sure you want to delete this PLC?\");\n      if (confirmed) {\n        this.deletePLC(plcIndex);\n      }\n    }\n  }\n};\n/** \nimport {onMounted, ref} from \"vue\";\nimport axios from \"axios\";\nimport {useRouter} from \"vue-router\";\nimport VueCookies from 'vue-cookies';\n\nexport default {\n  name: \"Home\",\n  data() {\n  return {\n    buttonImages: ['Config.png', 'Monitoring.png'],  // Replace with the paths to your button images\n    hoverEffects: [false, false]  // Track hover effects for each button\n  };\n},\nmethods: {\n  navigateToItems() {\n    this.$router.push(\"/Items\"); // Replace \"/Items\" with the desired route path\n  },\n  navigateToItems2() {\n    this.$router.push(\"/Monitor\"); // Replace \"/Items\" with the desired route path\n  },\n  toggleHoverEffect(index) {\n    this.hoverEffects[index - 1] = !this.hoverEffects[index - 1];\n  }\n},\n\n\n  setup() {\n    const message = ref('');\n    const router = useRouter();\n\n    /*\n    onMounted(async () => {\n      try {\n        const {data} = await axios.get('user');\n\n        message.value = `Hi ${data.name}`;\n      } catch (e) {\n        await router.push('/login');\n      }\n    });\n\n\n\n    \n    onMounted(async () => {\n      const sessionCookie = document.cookie.replace(\n        /(?:(?:^|.*;\\s*)access_Token\\s*\\=\\s*([^;]*).*$)|^.*$/,\n        '$1'\n      );\n      console.log(sessionCookie);\n      const logoutBtn = document.getElementById('logoutBtn');\n\n\n      //\n      if(sessionCookie != \"\"){\n        \n        console.log(\"logout button event attached\");\n        logoutBtn.addEventListener('click', logout);\n      } else{\n        logoutBtn.textContent = \"login\";\n        logoutBtn.addEventListener('click', login);\n        //message.value = `Please login your account`;\n\n      }\n      \n      //headers.append('Access-Control-Allow-Origin', 'http://localhost:3000');\n      //headers.append('Access-Control-Allow-Credentials', 'true');\n      try {\n        const response = await axios.get('http://localhost:8087/dashboard', {\n          headers: {\n            Authorization: `Bearer ${sessionCookie}`,\n            'Access-Control-Allow-Origin': '*'\n          },\n        });\n\n        const { data } = response;\n\n\n        //console.log(data);\n        //\n\n    \n        // Access the object properties\n        const username = data.username;\n        const blob = data.blob;\n\n        console.log(\"Username:\", username);\n        //console.log(\"Blob:\",  atob(blob));\n        VueCookies.set('blob_data',  blob, '7d'); // Save the access token in a cookie for 7 days\n\n        const blobCookie = document.cookie.replace(\n          /(?:(?:^|.*;\\s*)blob_data\\s*\\=\\s*([^;]*).*$)|^.*$/,\n          '$1'\n        );\n      //console.log(blobCookie);\n      //\n      // URL decoding\n      //var decodedValue = decodeURIComponent(blobCookie);\n\n      // Base64 decoding\n      //var base64DecodedValue = atob(decodedValue);\n      //console.log(base64DecodedValue);\n        //\n        message.value = `Username : ${data.username}`;\n        if(data.username === undefined){\n          message.value = \"Please login your account\";\n\n        }\n      } catch (error) {\n        console.error(error);\n        await router.push('/');\n      }\n    });\n    \n\n        function convertToLogin() {\n      logoutBtn.textContent = 'Login';\n      logoutBtn.removeEventListener('click', logout);\n      logoutBtn.addEventListener('click', login);\n    }\n          function login() {\n        // Perform login actions here\n        console.log('Login clicked');\n        router.push('/login');\n      }\n\n\n\n    const logout = async () => {\n      const sessionCookie = document.cookie.replace(\n        /(?:(?:^|.*;\\s*)access_Token\\s*\\=\\s*([^;]*).*$)|^.*$/,\n        '$1'\n      );\n      console.log(sessionCookie);\n\n      //\n\n      axios.post('http://javaspring-env.eba-dzxvrt3g.us-east-1.elasticbeanstalk.com/api/v1/auth/quit')\n        .then(() => {\n          // Handle successful logout\n          // Clear any user-related data in your Vue.js application\n          // Redirect the user to the login page or any other desired route\n          console.log(\"success\");\n          sessionStorage.removeItem('access_Token');\n          document.cookie = \"access_Token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\n          localStorage.removeItem('access_Token');\n\n          message.value = `You are logout please login again`;\n          //\n\n          //\n          convertToLogin();\n          router.push('/login');\n\n        })\n        .catch(error => {\n          // Handle logout error\n          console.log(error);\n          router.push('/login');\n        });\n    }\n\n    return {\n      message,\n      logout\n    }\n\n\n\n  }\n}\n\n\n*/","map":{"version":3,"names":["onMounted","ref","axios","useRouter","VueCookies","name","data","formData","email","responseData","error","successModalVisible","userID","userToken","plcItems","mounted","get","then","response","catch","message","methods","showDeleteConfirmation","plcIndex","addressIndex","confirmed","confirm","deleteAddress","saveData","showSuccessModal","closeSuccessModal","toggleDropdown","showDropdown","deletePLC","plcIdToDelete","id","delete","splice","console","addPLC","newPLCName","trim","newPLCToken","isDuplicateToken","some","plcItem","token","alert","newPLC","editingToken","newToken","addresses","post","log","push","addAddress","newAddress","description","updatePLCAddress","plc","userid","plcid","pop","length","editAddress","address","editing","saveAddress","cancelEdit","editPLCToken","savePLCToken","cancelEditPLCToken","showDeletePLCConfirmation"],"sources":["D:\\Project\\VUEJSSPRING_CRUD_JWT\\vue-crud-api-jwt-vuex-integrated-with-spring\\src\\views\\HomeView.vue"],"sourcesContent":["<template>\n<!---\n  <div class=\"container mt-5 text-center\">\n      <div class=\"message-container\">\n        <h5>{{ message }}</h5>\n      </div>\n  </div>\n      \n  <div class=\"container mt-5 text-center\">\n    <a href=\"javascript:void(0)\" class=\"btn btn-lg btn-primary\" id=\"logoutBtn\">Logout</a>\n    <br>\n\n  </div>\n\n\n  <br>\n  <br>\n\n  \n  <div class=\"button-container\" >\n  <button class=\"button\" @mouseover=\"toggleHoverEffect(1)\" @mouseout=\"toggleHoverEffect(1)\" @click=\"navigateToItems\">\n    <img :src=\"buttonImages[0]\" alt=\"Button 1\">\n  </button>\n  <button class=\"button\" @mouseover=\"toggleHoverEffect(2)\" @mouseout=\"toggleHoverEffect(2)\" @click=\"navigateToItems2\">\n    <img :src=\"buttonImages[1]\" alt=\"Button 2\">\n  </button>\n</div>\n-->\n\n\n\n\n<div id=\"app\">\n  \n    <div class=\"sidebar\">\n      <p>User ID: {{ userID }}</p>\n      <p>Token: {{ userToken }}</p>\n    </div>\n    <div class=\"navbar\">\n        <a href=\"#\" @click=\"selectedLevel = 'Level 5 ERP'\">Level 5 ERP</a>\n        <a href=\"#\" @click=\"selectedLevel = 'Level 4 WMS'\">Level 4 WMS</a>\n        <a href=\"#\" @click=\"selectedLevel = 'Level 4 MES'\">Level 4 MES</a>\n        <a href=\"#\" @click=\"selectedLevel = 'Level 3 SCADA/ HMI'\">Level 3 SCADA/ HMI</a>\n        <a href=\"#\" @click=\"selectedLevel = 'Level 2 PLC'\">Level 2 PLC</a>\n        <a href=\"#\" @click=\"selectedLevel = 'Level 1 Sensor and Actuator'\">Level 1 Sensor and Actuator</a>\n\n      <div class=\"logout\">\n        <a href=\"#\" @click=\"logout\">Logout</a>\n      </div>\n\n      </div>\n\n    <div class=\"main\" style=\"margin-top:50px; color:white;\">\n      <h2>Level 2 PLC </h2>\n      <br>\n      <br>\n      <!-- -->\n\n\n\n\n\n\n      <div>\n    <!-- Form -->\n\n    <div v-if=\"successModalVisible\" class=\"modal\">\n      <div class=\"modal-content\">\n        <h2>Success!</h2>\n        <p>Your data has been saved successfully.</p>\n        <button @click=\"closeSuccessModal\">Close</button>\n      </div>\n    </div>\n  </div>\n\n\n\n\n  <!-- Confirmation Modal -->\n  <div v-if=\"confirmationModalVisible\" class=\"modal\">\n      <div class=\"modal-content\">\n        <h2>Confirm Delete?</h2>\n        <p>Are you sure you want to delete this data?</p>\n        <button @click=\"confirmDelete\">Delete</button>\n        <button @click=\"cancelDelete\">Cancel</button>\n      </div>\n    </div>\n\n    \n  <br>\n\n\n\n\n\n\n\n\n\n\n      <!---->\n      <table v-for=\"(plc, plcIndex) in plcItems\" :key=\"plcIndex\">\n        <tr>\n            <td width=\"60%\"><button @click=\"toggleDropdown(plcIndex)\">{{ plc.name }}</button></td>\n            <td width=\"20%\"><button @click=\"showDeletePLCConfirmation(plcIndex)\" class=\"red-alert-button\" style=\"margin-left:30px;\">Delete PLC</button></td>\n            <td width=\"20%\"><button @click=\"editPLCToken(plc)\"  class=\"ocean-blue-edit-button\"  style=\"margin-left: 30px;\">Edit Token</button>\n            \n            \n              <form v-if=\"plc.editingToken\" @submit.prevent=\"savePLCToken(plc)\">\n                  <label for=\"newToken\">Hardware Token:</label>\n                  <input v-model=\"plc.newToken\" id=\"newToken\" style=\"line-height: 28px;\" required>\n                  <br>\n                  <button type=\"submit\" class=\"purple-save-button\">Save</button>\n                  <button @click=\"cancelEditPLCToken(plc)\" class=\"dark-cancel-button\">Cancel</button>\n\n\n                                      <!-- Success Modal -->\n                    <div v-if=\"successModalVisible\" class=\"modal\">\n                      <div class=\"modal-content\">\n                        <h2>Success!</h2>\n                        <p>Your data has been saved successfully.</p>\n                        <button @click=\"closeSuccessModal\">Close</button>\n                      </div>\n                    </div>\n\n\n\n              </form>\n            </td>\n                \n          \n\n                    <!--  -->\n           \n          </tr>\n\n          \n\n        <table v-if=\"plc.showDropdown\">\n          <thead>\n            <tr>\n              <th>Address</th>\n              <th>Description</th>\n              <th>Token</th>\n              <th>PLC ID</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(address, addressIndex) in plc.addresses\" :key=\"addressIndex\">\n              <td>{{ address.name }}</td>\n              <td v-if=\"!address.editing\">{{ address.description }}</td>\n              <td v-else><input v-model=\"address.description\" @keyup.enter=\"saveAddress(address)\" @blur=\"saveAddress(address)\" placeholder=\"Address description\"  style=\"line-height: 28px;\" ></td>\n              <td>{{ plc.token }}</td>\n              <td>{{ plc.id }}</td>\n              <td>\n                <button @click=\"showDeleteConfirmation(plcIndex, addressIndex)\" class=\"red-alert-button\">Delete</button>\n                <br>\n                <button v-if=\"!address.editing\" @click=\"editAddress(address)\" class=\"ocean-blue-edit-button\">&nbsp&nbspEdit&nbsp&nbsp</button>\n                <template v-else>\n                  <button @click=\"saveAddress(address)\" class=\"purple-save-button\">Save</button>\n                  <button @click=\"cancelEdit(address)\" class=\"dark-cancel-button\">Cancel</button>\n                </template>\n              </td>\n            </tr>\n          </tbody>\n          <tfoot>\n            <tr>\n              <td>\n                <input v-model=\"plc.addresses.name\"   style=\"line-height: 28px;\" placeholder=\"Address name\">\n              </td>\n              <td>\n                <input v-model=\"plc.addresses.description\"  style=\"line-height: 28px;\" placeholder=\"Address description\">\n              </td>\n              <td>\n                {{ plc.token }}\n              </td>\n              <td>\n                {{ plc.id }}\n              </td>\n              <td>\n                <button @click=\"addAddress(plcIndex)\" class=\"grass-green-add-button\">Add Address</button>\n              </td>\n            </tr>\n          </tfoot>\n        </table>\n\n\n      </table>\n\n\n\n\n      \n      <div>\n        <input v-model=\"newPLCName\" style=\"line-height: 28px;\" placeholder=\"PLC name\">\n  <input v-model=\"newPLCToken\" style=\"margin-left: 30px; line-height: 28px;\" placeholder=\"PLC token\">\n  <button @click=\"addPLC\" class=\"grass-green-add-button\" style=\"margin-left: 30px;\">Add PLC</button>\n      </div>\n    </div>\n  </div>\n\n\n\n</template>\n\n<script>\nimport {onMounted, ref} from \"vue\";\nimport axios from \"axios\";\nimport {useRouter} from \"vue-router\";\nimport VueCookies from 'vue-cookies';\n\nexport default{\n  name: \"Home\",\n  \n  data() {\n    return{\n      formData: {\n        name: \"\",\n        email: \"\",\n        // Add more form fields as needed\n      },\n      responseData: null,\n      error: null,\n      successModalVisible: false,\n      userID: 'User123', // Replace 'User123' with your user ID\n      userToken: 'UserToken123', // Replace 'UserToken123' with your user token\n      plcItems: [],\n    }\n  },\n  mounted() {\n    // Making a GET request\n    axios.get('http://localhost:8089/plc')\n      .then(response => {\n        this.plcItems = response.data;\n        //for (let i = 0; i < response.data.length; i++) {\n        //  console.log(response.data[i].name);\n       // }\n        //console.log(response.data[0].addresses[0]);\n        //console.log(response.data[0].name);\n      })\n      .catch(error => {\n        this.error = error.message;\n      });\n  },\n  methods: {\n    showDeleteConfirmation(plcIndex, addressIndex) {\n    const confirmed = confirm(\"Are you sure you want to delete this address?\");\n    if (confirmed) {\n      this.deleteAddress(plcIndex, addressIndex);\n    }\n  },\n//\nsaveData() {\n      // Simulate saving data to the server (replace this with your actual API call)\n      // For example, using Axios:\n      // axios.post('/api/saveData', this.formData)\n      //   .then((response) => {\n      //     // Handle success\n      //     this.showSuccessModal();\n      //     // Clear the form data after successful submission\n      //     this.formData = {};\n      //   })\n      //   .catch((error) => {\n      //     // Handle error\n      //   });\n\n      // Simulate success for this example\n      this.showSuccessModal();\n      this.formData = {}; // Clear the form data after successful submission\n    },\n    showSuccessModal() {\n      this.successModalVisible = true;\n    },\n    closeSuccessModal() {\n      this.successModalVisible = false;\n    },\n  \n\n\n//\n  \n    toggleDropdown(plcIndex) {\n          this.plcItems[plcIndex].showDropdown = !this.plcItems[plcIndex].showDropdown;\n        },\n        deletePLC(plcIndex) {\n           // Get the PLC ID from the PLC object to be deleted\n            const plcIdToDelete = this.plcItems[plcIndex].id;\n\n          // Make the DELETE request using Axios\n          axios.delete(`http://localhost:8089/plc/${plcIdToDelete}`)\n            .then(response => {\n              // If the request is successful, remove the PLC item from the array in the frontend\n              this.plcItems.splice(plcIndex, 1);\n            })\n            .catch(error => {\n              // Handle errors if needed\n              console.error('Error deleting PLC:', error);\n            });\n        },\n        addPLC() {\n      if (this.newPLCName.trim() !== '' && this.newPLCToken.trim() !== '') {\n        const isDuplicateToken = this.plcItems.some(\n          (plcItem) => plcItem.token === this.newPLCToken\n        );\n\n        if (isDuplicateToken) {\n          alert('Token is already used in another PLC. Please use a different token.');\n          return;\n        }\n\n        // Create the new PLC object\n        const newPLC = {\n          name: this.newPLCName,\n          token: this.newPLCToken,\n          editingToken: false,\n          newToken: '',\n          showDropdown: false,\n          addresses: [],\n        };\n\n        // Send a POST request to the server to create the new PLC\n        axios.post('http://localhost:8089/plc', newPLC)\n          .then(response => {\n            // Handle success and update the list of PLC items or perform any other actions as required\n            console.log('New PLC added successfully');\n            this.plcItems.push(response.data); // Assuming the server responds with the newly created PLC object\n          })\n          .catch(error => {\n            // Handle error, if needed\n            console.error('Error adding new PLC:', error);\n          });\n\n        this.newPLCName = '';\n        this.newPLCToken = '';\n      }\n    },\n    async addAddress(plcIndex) {\n  // Create a new address object\n  const newAddress = {\n    name: '',\n    description: '',\n  };\n\n  try {\n    // Perform the PUT request to update the address array on the server\n    await this.updatePLCAddress(plcIndex, newAddress);\n    console.log('PLC address updated successfully');\n  } catch (error) {\n    // Handle error, if needed\n    console.error('Error updating PLC address:', error);\n  }\n},\n\nasync updatePLCAddress(plcIndex, newAddress) {\n      const plc = this.plcItems[plcIndex];\n\n      try {\n        // First, push the new address to the addresses array of the corresponding PLC\n        //this.plcItems[plcIndex].addresses.push(newAddress);\n\n        // Perform the PUT request to update the address array on the server\n        const response = await axios.post(`http://localhost:8089/address`, {\n          userid: 1,\n          plcid: plcIndex,\n          \n        });\n\n        // Optionally, update the local data with the response from the server if needed\n        // this.plcItems[plcIndex].addresses = response.data.addresses;\n\n        console.log('PLC address updated successfully');\n      } catch (error) {\n        console.error('Error updating PLC address:', error);\n        // If there's an error during the PUT request, remove the newly added address from the local data\n        this.plcItems[plcIndex].addresses.pop();\n        throw error; // Re-throw the error to be caught by the calling method (addAddress)\n      }\n    },\n\n            deleteAddress(plcIndex, addressIndex) {\n          // Check if the PLC item exists at plcIndex\n          if (this.plcItems[plcIndex]) {\n            // Get the specified PLC item\n\n\n          // Make the DELETE request using Axios\n          axios.delete(`http://localhost:8089/address/${addressIndex}`)\n            .then(response => {\n              // If the request is successful, remove the PLC item from the array in the frontend\n              plcItem.addresses.splice(addressIndex, 1);\n            })\n            .catch(error => {\n              // Handle errors if needed\n              console.error('Error deleting PLC:', error);\n            });\n\n\n            //\n\n            // Check if the address exists at addressIndex within the addresses array of the PLC item\n            if (plcItem.addresses && plcItem.addresses.length > addressIndex) {\n              // Remove the address at addressIndex from the addresses array\n              plcItem.addresses.splice(addressIndex, 1);\n            } else {\n              console.error('Invalid addressIndex:', addressIndex);\n            }\n          } else {\n            console.error('Invalid plcIndex:', plcIndex);\n          }\n        },\n\n        editAddress(address) {\n          address.editing = true;\n        },\n        saveAddress(address) {\n          address.editing = false;\n          this.showSuccessModal();\n\n        },\n        cancelEdit(address) {\n          address.editing = false;\n        },\n        editPLCToken(plc) {\n          plc.editingToken = true;\n          plc.newToken = plc.token;\n        },\n\n       savePLCToken(plc) {\n      // Check if the new token is not already used in any other PLC\n      const isDuplicateToken = this.plcItems.some(\n        (plcItem) => plcItem !== plc && plcItem.token === plc.newToken\n      );\n\n      if (isDuplicateToken) {\n        // Display an error message or take any action to handle the duplicate token\n        alert('Token is already used in another PLC. Please use a different token.');\n        return;\n      }\n\n      plc.token = plc.newToken;\n      plc.editingToken = false;\n      plc.newToken = '';\n      this.showSuccessModal();\n    },\n\n\n        cancelEditPLCToken(plc) {\n          plc.editingToken = false;\n          plc.newToken = '';\n        },\n\n        showDeletePLCConfirmation(plcIndex) {\n        const confirmed = confirm(\"Are you sure you want to delete this PLC?\");\n        if (confirmed) {\n          this.deletePLC(plcIndex);\n        }\n      },\n\n  },\n  \n}\n/** \nimport {onMounted, ref} from \"vue\";\nimport axios from \"axios\";\nimport {useRouter} from \"vue-router\";\nimport VueCookies from 'vue-cookies';\n\nexport default {\n  name: \"Home\",\n  data() {\n  return {\n    buttonImages: ['Config.png', 'Monitoring.png'],  // Replace with the paths to your button images\n    hoverEffects: [false, false]  // Track hover effects for each button\n  };\n},\nmethods: {\n  navigateToItems() {\n    this.$router.push(\"/Items\"); // Replace \"/Items\" with the desired route path\n  },\n  navigateToItems2() {\n    this.$router.push(\"/Monitor\"); // Replace \"/Items\" with the desired route path\n  },\n  toggleHoverEffect(index) {\n    this.hoverEffects[index - 1] = !this.hoverEffects[index - 1];\n  }\n},\n\n\n  setup() {\n    const message = ref('');\n    const router = useRouter();\n\n    /*\n    onMounted(async () => {\n      try {\n        const {data} = await axios.get('user');\n\n        message.value = `Hi ${data.name}`;\n      } catch (e) {\n        await router.push('/login');\n      }\n    });\n\n\n\n    \n    onMounted(async () => {\n      const sessionCookie = document.cookie.replace(\n        /(?:(?:^|.*;\\s*)access_Token\\s*\\=\\s*([^;]*).*$)|^.*$/,\n        '$1'\n      );\n      console.log(sessionCookie);\n      const logoutBtn = document.getElementById('logoutBtn');\n\n\n      //\n      if(sessionCookie != \"\"){\n        \n        console.log(\"logout button event attached\");\n        logoutBtn.addEventListener('click', logout);\n      } else{\n        logoutBtn.textContent = \"login\";\n        logoutBtn.addEventListener('click', login);\n        //message.value = `Please login your account`;\n\n      }\n      \n      //headers.append('Access-Control-Allow-Origin', 'http://localhost:3000');\n      //headers.append('Access-Control-Allow-Credentials', 'true');\n      try {\n        const response = await axios.get('http://localhost:8087/dashboard', {\n          headers: {\n            Authorization: `Bearer ${sessionCookie}`,\n            'Access-Control-Allow-Origin': '*'\n          },\n        });\n\n        const { data } = response;\n\n\n        //console.log(data);\n        //\n\n    \n        // Access the object properties\n        const username = data.username;\n        const blob = data.blob;\n\n        console.log(\"Username:\", username);\n        //console.log(\"Blob:\",  atob(blob));\n        VueCookies.set('blob_data',  blob, '7d'); // Save the access token in a cookie for 7 days\n\n        const blobCookie = document.cookie.replace(\n          /(?:(?:^|.*;\\s*)blob_data\\s*\\=\\s*([^;]*).*$)|^.*$/,\n          '$1'\n        );\n      //console.log(blobCookie);\n      //\n      // URL decoding\n      //var decodedValue = decodeURIComponent(blobCookie);\n\n      // Base64 decoding\n      //var base64DecodedValue = atob(decodedValue);\n      //console.log(base64DecodedValue);\n        //\n        message.value = `Username : ${data.username}`;\n        if(data.username === undefined){\n          message.value = \"Please login your account\";\n\n        }\n      } catch (error) {\n        console.error(error);\n        await router.push('/');\n      }\n    });\n    \n\n        function convertToLogin() {\n      logoutBtn.textContent = 'Login';\n      logoutBtn.removeEventListener('click', logout);\n      logoutBtn.addEventListener('click', login);\n    }\n          function login() {\n        // Perform login actions here\n        console.log('Login clicked');\n        router.push('/login');\n      }\n\n\n\n    const logout = async () => {\n      const sessionCookie = document.cookie.replace(\n        /(?:(?:^|.*;\\s*)access_Token\\s*\\=\\s*([^;]*).*$)|^.*$/,\n        '$1'\n      );\n      console.log(sessionCookie);\n\n      //\n\n      axios.post('http://javaspring-env.eba-dzxvrt3g.us-east-1.elasticbeanstalk.com/api/v1/auth/quit')\n        .then(() => {\n          // Handle successful logout\n          // Clear any user-related data in your Vue.js application\n          // Redirect the user to the login page or any other desired route\n          console.log(\"success\");\n          sessionStorage.removeItem('access_Token');\n          document.cookie = \"access_Token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\n          localStorage.removeItem('access_Token');\n\n          message.value = `You are logout please login again`;\n          //\n\n          //\n          convertToLogin();\n          router.push('/login');\n\n        })\n        .catch(error => {\n          // Handle logout error\n          console.log(error);\n          router.push('/login');\n        });\n    }\n\n    return {\n      message,\n      logout\n    }\n\n\n\n  }\n}\n\n\n*/\n\n\n\n</script>\n\n<style>\n  .modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 9999; /* Set the z-index to place the modal on top */\n  }\n\n  .modal-content {\n    background-color: #fde2e8; /* Set the background color to white-pink */\n    border: 2px solid #ff1493; /* Add a 2px border with pink color */\n    padding: 20px;\n    border-radius: 5px;\n    color:black;\n  }\n\n\n  .modal-content button {\n    /* Add styles for the \"Close\" button */\n    border: 1px solid #000; /* Black border */\n    padding: 8px 12px; /* Adjust padding as needed */\n    background-color: #fff; /* White background */\n    color: #000; /* Black text color */\n    cursor: pointer;\n    border-radius: 5px;\n  }\n\n  .modal-content button:hover {\n    background-color: #000; /* Change background color on hover */\n    color: #fff; /* Change text color on hover */\n  }\n\n/* Styling for the black alert button */\n.dark-cancel-button {\n  padding: 10px 20px;\n  background-color: black; /* Change the background color to black */\n  color: white;\n  border: 2px solid darkgray; /* Change the border color to a darker shade of gray */\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n}\n\n/* On hover effect */\n.dark-cancel-button:hover {\n  background-color: darkgray; /* Change the hover background color to a darker shade of gray */\n}\n\n/* On click effect */\n.dark-cancel-button:active {\n  background-color: dimgray; /* Use a darker shade of gray on click */\n}\n\n\n\n/* Styling for the purple alert button */\n.purple-save-button {\n  padding: 10px 20px;\n  background-color: purple; /* Change the background color to purple */\n  color: white;\n  border: 2px solid darkpurple; /* Change the border color to a darker shade of purple */\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n}\n\n/* On hover effect */\n.purple-save-button:hover {\n  background-color: darkpurple; /* Change the hover background color to a darker shade of purple */\n}\n\n/* On click effect */\n.purple-save-button:active {\n  background-color: #800080; /* Use a darker shade of purple on click (here using hex code) */\n}\n\n\n\n\n/* Styling for the grass green alert button */\n.grass-green-add-button {\n  padding: 10px 20px;\n  background-color: #3CB371; /* Use your preferred grass green color code */\n  color: white;\n  border: 2px solid #2E8B57; /* Use a slightly darker shade of grass green for the border */\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n}\n\n/* On hover effect */\n.grass-green-add-button:hover {\n  background-color: #2E8B57; /* Use a slightly darker shade of grass green on hover */\n}\n\n/* On click effect */\n.grass-green-add-button:active {\n  background-color: #228B22; /* Use a darker shade of grass green on click */\n}\n\n\n/* Styling for the ocean blue alert button */\n.ocean-blue-edit-button {\n  padding: 10px 20px;\n  background-color: #007BAC; /* Use your preferred ocean blue color code */\n  color: white;\n  border: 2px solid #005A80; /* Use a slightly darker shade of ocean blue for the border */\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n}\n\n/* On hover effect */\n.ocean-blue-edit-button:hover {\n  background-color: #005A80; /* Use a slightly darker shade of ocean blue on hover */\n}\n\n/* On click effect */\n.ocean-blue-edit-button:active {\n  background-color: #00416A; /* Use a darker shade of ocean blue on click */\n}\n\n/* Styling for the red alert button */\n.red-alert-button {\n  padding: 10px 20px;\n  background-color: red;\n  color: white;\n  border: 2px solid darkred;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n}\n\n/* On hover effect */\n.red-alert-button:hover {\n  background-color: darkred;\n}\n\n/* On click effect */\n.red-alert-button:active {\n  background-color: crimson;\n}\n\n\n/* Sidebar styles */\n.sidebar {\n  height: 100%;\n  width: 200px;\n  position: fixed;\n  top: 0;\n  left: 0;\n  background-color: #111;\n  padding-top: 20px;\n}\n\n.sidebar a {\n  display: block;\n  color: white;\n  padding: 16px;\n  text-decoration: none;\n}\n\n.sidebar a:hover {\n  background-color: #ddd;\n  color: black;\n}\n\n/* Main content styles */\n.main {\n  margin-left: 200px; /* Same as the width of the sidebar */\n  padding: 20px;\n}\n\ntable {\n  border-collapse: collapse;\n  width: 100%;\n}\n\nth, td {\n  border: 1px solid black;\n  padding: 8px;\n  text-align: left;\n}\n\n\n/* Navbar styles */\n.navbar {\n  background-color: #333;\n  overflow: hidden;\n  width: 100%;\n  position: fixed; /* Position the navbar as fixed */\n  top: 0; /* Place the navbar at the top */\n  left: 200px; /* Align with the sidebar */\n  z-index: 2; /* Add z-index to position the navbar above the main content */\n}\n\n.navbar a {\n  float: left;\n  display: block;\n  color: white;\n  text-align: center;\n  padding: 14px 16px;\n  text-decoration: none;\n}\n\n.navbar a:hover {\n  background-color: #ddd;\n  color: black;\n}\n\n/* Right-aligned logout button */\n.logout {\n  display: flex;\n  align-items: center;\n}\n\n.logout a {\n  color: white;\n  padding: 14px 16px;\n  text-decoration: none;\n}\n\n.logout a:hover {\n  background-color: #ddd;\n  color: black;\n}\n\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}