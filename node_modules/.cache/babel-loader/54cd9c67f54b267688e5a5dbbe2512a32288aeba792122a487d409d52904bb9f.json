{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { onMounted, ref } from \"vue\";\nimport axios from \"axios\";\nimport { useRouter } from \"vue-router\";\nimport VueCookies from 'vue-cookies';\nexport default {\n  name: \"Home\",\n  data() {\n    return {\n      formData: {\n        name: \"\",\n        email: \"\"\n        // Add more form fields as needed\n      },\n\n      addresses: {\n        id: '',\n        // Bind the 'name' input value to this property\n        name: '' // Bind the 'description' input value to this property\n      },\n\n      responseData: null,\n      error: null,\n      successModalVisible: false,\n      userID: '5',\n      // Replace 'User123' with your user ID\n      userToken: 'UserToken123',\n      // Replace 'UserToken123' with your user token\n      plcItems: [],\n      categorizedAddresses: {},\n      newAddressDescription: '',\n      newAddressName: ''\n    };\n  },\n  mounted() {\n    // Making a GET request\n    axios.get('http://localhost:8089/plc').then(response => {\n      this.plcItems = response.data;\n\n      // Initialize an empty object to store the categorized addresses under IDs\n      const categorizedAddresses = {};\n\n      // Loop through the data array and categorize addresses under IDs\n      this.plcItems.forEach(item => {\n        if (item.addresses && item.addresses.length > 0) {\n          // Add the addresses of the current item to the corresponding ID array\n          item.addresses.forEach(address => {\n            if (address.id && address.name) {\n              // If the ID does not exist in the categorizedAddresses object, initialize an array for it\n              if (!categorizedAddresses[address.id]) {\n                categorizedAddresses[address.id] = [];\n              }\n\n              // Push the address details to the array under the corresponding ID\n              categorizedAddresses[address.id].push({\n                id: address.id,\n                name: address.name,\n                description: address.description\n              });\n            }\n          });\n        }\n      });\n\n      // Now you have the categorized addresses under their IDs\n      console.log(\"Categorized Addresses:\", categorizedAddresses);\n\n      // Assign the categorized addresses to the component's data\n      this.categorizedAddresses = categorizedAddresses;\n    }).catch(error => {\n      this.error = error.message;\n    });\n  },\n  methods: {\n    showDeleteConfirmation(plcIndex, addressIndex, address) {\n      const confirmed = confirm(\"Are you sure you want to delete this address?\");\n      if (confirmed) {\n        this.deleteAddress(plcIndex, addressIndex, address);\n      }\n    },\n    //\n\n    //\n    saveData() {\n      // Simulate saving data to the server (replace this with your actual API call)\n      // For example, using Axios:\n      // axios.post('/api/saveData', this.formData)\n      //   .then((response) => {\n      //     // Handle success\n      //     this.showSuccessModal();\n      //     // Clear the form data after successful submission\n      //     this.formData = {};\n      //   })\n      //   .catch((error) => {\n      //     // Handle error\n      //   });\n\n      // Simulate success for this example\n      this.showSuccessModal();\n      this.formData = {}; // Clear the form data after successful submission\n    },\n\n    showSuccessModal() {\n      this.successModalVisible = true;\n    },\n    closeSuccessModal() {\n      this.successModalVisible = false;\n    },\n    //\n    findPLCWithAddressId(addressId) {\n      for (let plcIndex = 0; plcIndex < this.plcItems.length; plcIndex++) {\n        const plc = this.plcItems[plcIndex];\n        for (let addressIndex = 0; addressIndex < plc.addresses.length; addressIndex++) {\n          if (plc.addresses[addressIndex].id === addressId) {\n            return {\n              plcIndex,\n              addressIndex\n            };\n          }\n        }\n      }\n      return null; // Address ID not found in any PLC\n    },\n\n    toggleDropdown(plcIndex) {\n      this.plcItems[plcIndex].showDropdown = !this.plcItems[plcIndex].showDropdown;\n    },\n    deletePLC(plcIndex) {\n      // Get the PLC ID from the PLC object to be deleted\n      const plcIdToDelete = this.plcItems[plcIndex].id;\n\n      // Make the DELETE request using Axios\n      axios.delete(`http://localhost:8089/plc/${plcIdToDelete}`).then(response => {\n        // If the request is successful, remove the PLC item from the array in the frontend\n        this.plcItems.splice(plcIndex, 1);\n      }).catch(error => {\n        // Handle errors if needed\n        console.error('Error deleting PLC:', error);\n      });\n    },\n    addPLC() {\n      if (this.newPLCName.trim() !== '' && this.newPLCToken.trim() !== '') {\n        const isDuplicateToken = this.plcItems.some(plcItem => plcItem.token === this.newPLCToken);\n        if (isDuplicateToken) {\n          alert('Token is already used in another PLC. Please use a different token.');\n          return;\n        }\n\n        // Create the new PLC object\n        const newPLC = {\n          name: this.newPLCName,\n          token: this.newPLCToken,\n          editingToken: false,\n          newToken: '',\n          showDropdown: false,\n          addresses: [],\n          plc_userid: this.userID\n        };\n\n        // Send a POST request to the server to create the new PLC\n        axios.post('http://localhost:8089/plc', newPLC).then(response => {\n          // Handle success and update the list of PLC items or perform any other actions as required\n          console.log('New PLC added successfully');\n          this.plcItems.push(response.data); // Assuming the server responds with the newly created PLC object\n        }).catch(error => {\n          // Handle error, if needed\n          console.error('Error adding new PLC:', error);\n        });\n        this.newPLCName = '';\n        this.newPLCToken = '';\n      }\n    },\n    async addAddress(plcIndex) {\n      // Create a new address object\n      //console.log(plcIndex);\n      //console.log(this.plcItems[plcIndex]);\n      //plc.addresses.name\n      //console.log(plc.addresses.name);\n      //console.log(this.plc.addresses.description);\n\n      //console.log(newAddress.id);\n      /*\n        31/7/2023\n        Author: junxian428\n      */\n      //console.log(this.newAddressName);\n      //console.log(this.newAddressDescription);\n      //console.log(this.plcItems[plcIndex]);\n      // console.log(this.plcItems[plcIndex].id);\n\n      //\n\n      try {\n        const plcId = this.plcItems[plcIndex].id; // Replace this with the correct PLC ID you want to update\n        const response = await axios.put(`http://localhost:8089/plc/${plcId}`, {\n          name: this.plcItems[plcIndex].name,\n          token: this.plcItems[plcIndex].token,\n          userid: this.userID,\n          addresses: [{\n            name: this.newAddressName,\n            description: this.newAddressDescription\n          }]\n        });\n\n        // The response data will contain the updated PLC information\n        //console.log(\"Updated PLC:\", response.data);\n        //console.log(\"Updated PLC:\", response.data.addresses[0].id);\n        // After successfully adding the address, you can update the local Vue data to reflect the changes\n        this.plcItems[plcIndex].addresses.push({\n          id: response.data.addresses[0].id,\n          name: this.newAddressName,\n          description: this.newAddressDescription\n        });\n\n        // Clear the input fields after adding the address\n        this.newAddressName = \"\";\n        this.newAddressDescription = \"\";\n      } catch (error) {\n        console.error(\"Error updating PLC:\", error);\n      }\n\n      //console.log(this.addresses.id);\n    },\n\n    //\n    //This Function is for Update ADdress by getting Parent Node Attribute PLease dont not delete this.\n    //\n    categorizedAddressesFindByAddressID(addressID) {\n      // Find the PLC that contains the address with the specified addressID\n      for (let plcIndex = 0; plcIndex < this.plcItems.length; plcIndex++) {\n        const plc = this.plcItems[plcIndex];\n        for (let addressIndex = 0; addressIndex < plc.addresses.length; addressIndex++) {\n          if (plc.addresses[addressIndex].id === addressID) {\n            return plc;\n          }\n        }\n      }\n      return null; // Return null if the address ID is not found in any PLC\n    },\n\n    async updatePLCAddress(addressIndex, plcIndex) {\n      //const plc = this.plcItems[plcIndex];\n      //console.log(this.categorizedAddresses[);\n      this.plcItems[plcIndex].addresses.pop();\n      try {\n        // First, push the new address to the addresses array of the corresponding PLC\n        //this.plcItems[plcIndex].addresses.push(newAddress);\n\n        // Perform the PUT request to update the address array on the server\n        const response = await axios.post(`http://localhost:8089/address`, {\n          userid: 1,\n          plcid: plcIndex\n        });\n\n        // Optionally, update the local data with the response from the server if needed\n        // this.plcItems[plcIndex].addresses = response.data.addresses;\n\n        console.log('PLC address updated successfully');\n      } catch (error) {\n        console.error('Error updating PLC address:', error);\n        // If there's an error during the PUT request, remove the newly added address from the local data\n        throw error; // Re-throw the error to be caught by the calling method (addAddress)\n      }\n    },\n\n    deleteAddress(addressIdToDelete, addressIndex, address) {\n      console.log(addressIdToDelete);\n      console.log(address);\n      console.log(this.findPLCWithAddressId(address.id));\n      //console.log(this.findPLCWithAddressId(address.id)['plcIndex']);\n      //console.log(this.plcItems);\n      // Make the DELETE request using Axios\n      axios.delete(`http://localhost:8089/address/${address.id}`).then(response => {\n        // If the request is successful, remove the address from the local Vue data\n        this.plcItems[this.findPLCWithAddressId(address.id)['plcIndex']].addresses.splice(addressIndex, 1);\n        console.log('Address deleted successfully:', response.data);\n      }).catch(error => {\n        // Handle errors if needed\n        console.error('Error deleting address:', error);\n      });\n\n      // Find the PLC that contains the address with the specified Address ID\n      //console.log(addressIdToDelete); \n      //console.log(addressIdToDelete);\n      //console.log(addressIndex);\n      //console.log(this.plcItems[addressIdToDelete].token);\n\n      //const address = this.categorizedAddresses[this.plcItems[addressIdToDelete].token];\n      //console.log(address[addressIndex]);\n      //console.log(address[addressIndex].id);\n\n      // Make the DELETE request using Axios\n      //    axios.delete(`http://localhost:8089/address/${address[addressIndex].id}`)\n      //  .then(response => {\n      // If the request is successful, remove the PLC item from the array in the frontend\n      //  console.log(addressIndex);\n      //this.address.pop(addressIndex, 1);\n      //this.address.splice(addressIndex, 1);\n      //this.plcItems[plcIndex].addresses.splice(addressIndex, 1);\n\n      //})\n      //.catch(error => {\n      // Handle errors if needed\n      // console.error('Error deleting PLC:', error);\n      //});\n\n      //console.log(this.categorizedAddresses[this.plcItems[addressIdToDelete].token[addressIndex]]);\n    },\n\n    /*\n    \n                deleteAddress(plcIndex, addressIndex) {\n              // Check if the PLC item exists at plcIndex\n    \n              if (this.plcItems[plcIndex]) {\n                // Get the specified PLC item\n    \n    \n    \n               // const plcItem = this.plcItems[plcIndex];\n                //\n               // console.log(plcItem.addresses.id);\n    \n                // Check if the address exists at addressIndex within the addresses array of the PLC item\n                if (plcItem.addresses && plcItem.addresses.length > addressIndex) {\n                  // Remove the address at addressIndex from the addresses array\n                            // Make the DELETE request using Axios\n                    axios.delete(`http://localhost:8089/address/${addressIndex}`)\n                      .then(response => {\n                        // If the request is successful, remove the PLC item from the array in the frontend\n                        plcItems.addresses.splice(addressIndex, 1);\n                      })\n                      .catch(error => {\n                        // Handle errors if needed\n                        console.error('Error deleting PLC:', error);\n                      });\n    \n                } else {\n                  console.error('Invalid addressIndex:', addressIndex);\n                }\n              } else {\n                console.error('Invalid plcIndex:', plcIndex);\n              }\n            },\n            */\n\n    editAddress(address) {\n      address.editing = true;\n    },\n    async saveAddress(address, plcIndex, plc) {\n      address.editing = false;\n      console.log(address.id);\n      console.log(address.name);\n      console.log(address.description);\n      //console.log(plcIndex);\n      //console.log(address.description);\n      //console.log(this.plcItems);\n      //console.log(this.categorizedAddresses);\n      console.log(this.categorizedAddressesFindByAddressID(address.id));\n      const TargetPLC = this.categorizedAddressesFindByAddressID(address.id);\n      console.log(TargetPLC.id);\n      console.log(TargetPLC.name);\n      console.log(TargetPLC.userid);\n      console.log(TargetPLC.token);\n      try {\n        // Assuming you have the TargetPLC object as the parent PLC of the address\n        const response = await axios.put(`http://localhost:8089/plc/${TargetPLC.id}`, {\n          name: TargetPLC.name,\n          token: TargetPLC.token,\n          userid: TargetPLC.userid,\n          addresses: [{\n            id: address.id,\n            name: address.name,\n            description: address.description\n          }]\n        });\n\n        // The response data will contain the updated PLC information\n        console.log(\"Updated PLC:\", response.data);\n\n        // After successfully saving the address, you can update the local Vue data to reflect the changes if needed\n        // For example, if the server returned an updated PLC object, you can replace the old PLC object in the array\n        //this.plcItems.splice(plcIndex, 1, response.data);\n      } catch (error) {\n        console.error(\"Error saving address:\", error);\n        // Handle the error as needed, e.g., show an error message to the user\n      }\n\n      // ... (your other methods)\n\n      //console.log(this.categorizedAddresses[\"OMRON 1234\"][0]);\n      //console.log(this.plcItems);\n      //const plcItem = this.plcItems[plcIndex];\n      //console.log(plcItem);\n      //\n    },\n\n    cancelEdit(address) {\n      address.editing = false;\n    },\n    async editPLCToken(plc) {\n      plc.editingToken = true;\n      console.log(plc.id);\n      //console.log(plc.newToken);\n      //\n\n      /*\n        try {\n          const plcId = this.plcItems[plcIndex].id; // Replace this with the correct PLC ID you want to update\n          const response = await axios.put(`http://localhost:8089/plc/${plcId}`, {\n            name: this.plcItems[plcIndex].name,\n            token: plc.token,\n            userid: this.userID,\n            addresses: this.addresses,\n          });\n           // The response data will contain the updated PLC information\n          //console.log(\"Updated PLC:\", response.data);\n          //console.log(\"Updated PLC:\", response.data.addresses[0].id);\n          // After successfully adding the address, you can update the local Vue data to reflect the changes\n          plc.newToken = plc.token;\n             } catch (error) {\n            console.error(\"Error updating PLC:\", error);\n          }\n           */\n\n      //\n    },\n\n    async savePLCToken(plc, plcIndex) {\n      // Check if the new token is not already used in any other PLC\n      const isDuplicateToken = this.plcItems.some(plcItem => plcItem !== plc && plcItem.token === plc.newToken);\n      if (isDuplicateToken) {\n        // Display an error message or take any action to handle the duplicate token\n        alert('Token is already used in another PLC. Please use a different token.');\n        return;\n      }\n      try {\n        const plcId = plc.id; // Replace this with the correct PLC ID you want to update\n        /*\n        const response = await axios.put(`http://localhost:8089/plc/updateToken/${plcId}`, {\n          name: plc.name,\n          token: plc.newToken,\n          userid: this.userID,\n          addresses: this.addresses\n        });\n        */\n        console.log(this.addresses);\n        plc.token = plc.newToken;\n        plc.editingToken = false;\n        plc.newToken = '';\n        this.showSuccessModal();\n        // The response data will contain the updated PLC information\n        //console.log(\"Updated PLC:\", response.data);\n        //console.log(\"Updated PLC:\", response.data.addresses[0].id);\n      } catch (error) {\n        console.error(\"Error updating PLC:\", error);\n      }\n    },\n    cancelEditPLCToken(plc) {\n      plc.editingToken = false;\n      plc.newToken = '';\n    },\n    showDeletePLCConfirmation(plcIndex) {\n      const confirmed = confirm(\"Are you sure you want to delete this PLC?\");\n      if (confirmed) {\n        this.deletePLC(plcIndex);\n      }\n    }\n  }\n};\n/** \nimport {onMounted, ref} from \"vue\";\nimport axios from \"axios\";\nimport {useRouter} from \"vue-router\";\nimport VueCookies from 'vue-cookies';\n\nexport default {\n  name: \"Home\",\n  data() {\n  return {\n    buttonImages: ['Config.png', 'Monitoring.png'],  // Replace with the paths to your button images\n    hoverEffects: [false, false]  // Track hover effects for each button\n  };\n},\nmethods: {\n  navigateToItems() {\n    this.$router.push(\"/Items\"); // Replace \"/Items\" with the desired route path\n  },\n  navigateToItems2() {\n    this.$router.push(\"/Monitor\"); // Replace \"/Items\" with the desired route path\n  },\n  toggleHoverEffect(index) {\n    this.hoverEffects[index - 1] = !this.hoverEffects[index - 1];\n  }\n},\n\n\n  setup() {\n    const message = ref('');\n    const router = useRouter();\n\n    /*\n    onMounted(async () => {\n      try {\n        const {data} = await axios.get('user');\n\n        message.value = `Hi ${data.name}`;\n      } catch (e) {\n        await router.push('/login');\n      }\n    });\n\n\n\n    \n    onMounted(async () => {\n      const sessionCookie = document.cookie.replace(\n        /(?:(?:^|.*;\\s*)access_Token\\s*\\=\\s*([^;]*).*$)|^.*$/,\n        '$1'\n      );\n      console.log(sessionCookie);\n      const logoutBtn = document.getElementById('logoutBtn');\n\n\n      //\n      if(sessionCookie != \"\"){\n        \n        console.log(\"logout button event attached\");\n        logoutBtn.addEventListener('click', logout);\n      } else{\n        logoutBtn.textContent = \"login\";\n        logoutBtn.addEventListener('click', login);\n        //message.value = `Please login your account`;\n\n      }\n      \n      //headers.append('Access-Control-Allow-Origin', 'http://localhost:3000');\n      //headers.append('Access-Control-Allow-Credentials', 'true');\n      try {\n        const response = await axios.get('http://localhost:8087/dashboard', {\n          headers: {\n            Authorization: `Bearer ${sessionCookie}`,\n            'Access-Control-Allow-Origin': '*'\n          },\n        });\n\n        const { data } = response;\n\n\n        //console.log(data);\n        //\n\n    \n        // Access the object properties\n        const username = data.username;\n        const blob = data.blob;\n\n        console.log(\"Username:\", username);\n        //console.log(\"Blob:\",  atob(blob));\n        VueCookies.set('blob_data',  blob, '7d'); // Save the access token in a cookie for 7 days\n\n        const blobCookie = document.cookie.replace(\n          /(?:(?:^|.*;\\s*)blob_data\\s*\\=\\s*([^;]*).*$)|^.*$/,\n          '$1'\n        );\n      //console.log(blobCookie);\n      //\n      // URL decoding\n      //var decodedValue = decodeURIComponent(blobCookie);\n\n      // Base64 decoding\n      //var base64DecodedValue = atob(decodedValue);\n      //console.log(base64DecodedValue);\n        //\n        message.value = `Username : ${data.username}`;\n        if(data.username === undefined){\n          message.value = \"Please login your account\";\n\n        }\n      } catch (error) {\n        console.error(error);\n        await router.push('/');\n      }\n    });\n    \n\n        function convertToLogin() {\n      logoutBtn.textContent = 'Login';\n      logoutBtn.removeEventListener('click', logout);\n      logoutBtn.addEventListener('click', login);\n    }\n          function login() {\n        // Perform login actions here\n        console.log('Login clicked');\n        router.push('/login');\n      }\n\n\n\n    const logout = async () => {\n      const sessionCookie = document.cookie.replace(\n        /(?:(?:^|.*;\\s*)access_Token\\s*\\=\\s*([^;]*).*$)|^.*$/,\n        '$1'\n      );\n      console.log(sessionCookie);\n\n      //\n\n      axios.post('http://')\n        .then(() => {\n          // Handle successful logout\n          // Clear any user-related data in your Vue.js application\n          // Redirect the user to the login page or any other desired route\n          console.log(\"success\");\n          sessionStorage.removeItem('access_Token');\n          document.cookie = \"access_Token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\n          localStorage.removeItem('access_Token');\n\n          message.value = `You are logout please login again`;\n          //\n\n          //\n          convertToLogin();\n          router.push('/login');\n\n        })\n        .catch(error => {\n          // Handle logout error\n          console.log(error);\n          router.push('/login');\n        });\n    }\n\n    return {\n      message,\n      logout\n    }\n\n\n\n  }\n}\n\n\n*/","map":{"version":3,"names":["onMounted","ref","axios","useRouter","VueCookies","name","data","formData","email","addresses","id","responseData","error","successModalVisible","userID","userToken","plcItems","categorizedAddresses","newAddressDescription","newAddressName","mounted","get","then","response","forEach","item","length","address","push","description","console","log","catch","message","methods","showDeleteConfirmation","plcIndex","addressIndex","confirmed","confirm","deleteAddress","saveData","showSuccessModal","closeSuccessModal","findPLCWithAddressId","addressId","plc","toggleDropdown","showDropdown","deletePLC","plcIdToDelete","delete","splice","addPLC","newPLCName","trim","newPLCToken","isDuplicateToken","some","plcItem","token","alert","newPLC","editingToken","newToken","plc_userid","post","addAddress","plcId","put","userid","categorizedAddressesFindByAddressID","addressID","updatePLCAddress","pop","plcid","addressIdToDelete","editAddress","editing","saveAddress","TargetPLC","cancelEdit","editPLCToken","savePLCToken","cancelEditPLCToken","showDeletePLCConfirmation"],"sources":["D:\\Project\\VUEJSSPRING_CRUD_JWT\\vue-crud-api-jwt-vuex-integrated-with-spring\\src\\views\\HomeView.vue"],"sourcesContent":["<template>\n<!---\n  <div class=\"container mt-5 text-center\">\n      <div class=\"message-container\">\n        <h5>{{ message }}</h5>\n      </div>\n  </div>\n      \n  <div class=\"container mt-5 text-center\">\n    <a href=\"javascript:void(0)\" class=\"btn btn-lg btn-primary\" id=\"logoutBtn\">Logout</a>\n    <br>\n\n  </div>\n\n\n  <br>\n  <br>\n\n  \n  <div class=\"button-container\" >\n  <button class=\"button\" @mouseover=\"toggleHoverEffect(1)\" @mouseout=\"toggleHoverEffect(1)\" @click=\"navigateToItems\">\n    <img :src=\"buttonImages[0]\" alt=\"Button 1\">\n  </button>\n  <button class=\"button\" @mouseover=\"toggleHoverEffect(2)\" @mouseout=\"toggleHoverEffect(2)\" @click=\"navigateToItems2\">\n    <img :src=\"buttonImages[1]\" alt=\"Button 2\">\n  </button>\n</div>\n-->\n\n\n\n\n<div id=\"app\">\n  \n    <div class=\"sidebar\">\n      <p>User ID: {{ userID }}</p>\n      <p>Token: {{ userToken }}</p>\n    </div>\n    <div class=\"navbar\">\n        <a href=\"#\" @click=\"selectedLevel = 'Level 5 ERP'\">Level 5 ERP</a>\n        <a href=\"#\" @click=\"selectedLevel = 'Level 4 WMS'\">Level 4 WMS</a>\n        <a href=\"#\" @click=\"selectedLevel = 'Level 4 MES'\">Level 4 MES</a>\n        <a href=\"#\" @click=\"selectedLevel = 'Level 3 SCADA/ HMI'\">Level 3 SCADA/ HMI</a>\n        <a href=\"#\" @click=\"selectedLevel = 'Level 2 PLC'\">Level 2 PLC</a>\n        <a href=\"#\" @click=\"selectedLevel = 'Level 1 Sensor and Actuator'\">Level 1 Sensor and Actuator</a>\n\n      <div class=\"logout\">\n        <a href=\"#\" @click=\"logout\">Logout</a>\n      </div>\n\n      </div>\n\n    <div class=\"main\" style=\"margin-top:50px; color:white;\">\n      <h2>Level 2 PLC </h2>\n      <br>\n      <br>\n      <!-- -->\n\n\n\n\n\n\n      <div>\n    <!-- Form -->\n\n    <div v-if=\"successModalVisible\" class=\"modal\">\n      <div class=\"modal-content\">\n        <h2>Success!</h2>\n        <p>Your data has been saved successfully.</p>\n        <button @click=\"closeSuccessModal\">Close</button>\n      </div>\n    </div>\n  </div>\n\n\n\n\n  <!-- Confirmation Modal -->\n  <div v-if=\"confirmationModalVisible\" class=\"modal\">\n      <div class=\"modal-content\">\n        <h2>Confirm Delete?</h2>\n        <p>Are you sure you want to delete this data?</p>\n        <button @click=\"confirmDelete\">Delete</button>\n        <button @click=\"cancelDelete\">Cancel</button>\n      </div>\n    </div>\n\n    \n  <br>\n\n\n\n\n\n\n\n\n\n\n      <!---->\n      <table v-for=\"(plc, plcIndex) in plcItems\" :key=\"plcIndex\">\n        <tr>\n            <td width=\"60%\"><button @click=\"toggleDropdown(plcIndex)\">{{ plc.name }}</button></td>\n            <td width=\"20%\"><button @click=\"showDeletePLCConfirmation(plcIndex)\" class=\"red-alert-button\" style=\"margin-left:30px;\">Delete PLC</button></td>\n            <td width=\"20%\"><button @click=\"editPLCToken(plc)\"  class=\"ocean-blue-edit-button\"  style=\"margin-left: 30px;\">Edit Token</button>\n            \n            \n              <form v-if=\"plc.editingToken\" @submit.prevent=\"savePLCToken(plc)\">\n                  <label for=\"newToken\">Hardware Token:</label>\n                  <input v-model=\"plc.newToken\" id=\"newToken\" style=\"line-height: 28px;\" required>\n                  <br>\n                  <button type=\"submit\" class=\"purple-save-button\">Save</button>\n                  <button @click=\"cancelEditPLCToken(plc)\" class=\"dark-cancel-button\">Cancel</button>\n\n\n                                      <!-- Success Modal -->\n                    <div v-if=\"successModalVisible\" class=\"modal\">\n                      <div class=\"modal-content\">\n                        <h2>Success!</h2>\n                        <p>Your data has been saved successfully.</p>\n                        <button @click=\"closeSuccessModal\">Close</button>\n                      </div>\n                    </div>\n\n\n\n              </form>\n            </td>\n                \n          \n\n                    <!--  -->\n           \n          </tr>\n\n          \n\n        <table v-if=\"plc.showDropdown\">\n          <thead>\n            <tr>\n              <th>Address ID</th>\n              <th>Address</th>\n              <th>Description</th>\n              <th>Token</th>\n              <th>PLC ID</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(address, addressIndex) in plc.addresses\" :key=\"addressIndex\">\n              <td>{{ address.id }}</td> <!-- Display Address ID here -->\n              <td>{{ address.name }}</td>\n              <td v-if=\"!address.editing\">{{ address.description }}</td>\n              <td v-else><input v-model=\"address.description\" @keyup.enter=\"saveAddress(address,plcIndex,plc)\" @blur=\"saveAddress(address)\" placeholder=\"Address description\"  style=\"line-height: 28px;\" ></td>\n              <td>{{ plc.token }}</td>\n              <td>{{ plc.id }}</td>\n              <td>\n                <button @click=\" showDeleteConfirmation(plcIndex, addressIndex,address)\" class=\"red-alert-button\">Delete</button>\n                <br>\n                <button v-if=\"!address.editing\" @click=\"editAddress(address)\" class=\"ocean-blue-edit-button\">&nbsp&nbspEdit&nbsp&nbsp</button>\n                <template v-else>\n                  <button @click=\"saveAddress(address)\" class=\"purple-save-button\">Save</button>\n                  <button @click=\"cancelEdit(address)\" class=\"dark-cancel-button\">Cancel</button>\n                </template>\n              </td>\n            </tr>\n          </tbody>\n          <tfoot>\n            <tr>\n              <td>\n                <input v-model=\"newAddressName\"   style=\"line-height: 28px;\" placeholder=\"Address Name\">\n              </td>\n              <td>\n                <input v-model=\"newAddressDescription\"  style=\"line-height: 28px;\" placeholder=\"Address description\">\n              </td>\n              <td>\n                {{ plc.token }}\n              </td>\n              <td>\n                {{ plc.id }}\n              </td>\n              <td>\n                <button @click=\"addAddress(plcIndex)\" class=\"grass-green-add-button\">Add Address</button>\n              </td>\n            </tr>\n          </tfoot>\n        </table>\n\n\n      </table>\n\n\n\n\n      \n      <div>\n        <input v-model=\"newPLCName\" style=\"line-height: 28px;\" placeholder=\"PLC name\">\n  <input v-model=\"newPLCToken\" style=\"margin-left: 30px; line-height: 28px;\" placeholder=\"PLC token\">\n  <button @click=\"addPLC\" class=\"grass-green-add-button\" style=\"margin-left: 30px;\">Add PLC</button>\n      </div>\n    </div>\n  </div>\n\n\n\n</template>\n\n<script>\nimport {onMounted, ref} from \"vue\";\nimport axios from \"axios\";\nimport {useRouter} from \"vue-router\";\nimport VueCookies from 'vue-cookies';\n\nexport default{\n  name: \"Home\",\n  \n  data() {\n    return{\n      formData: {\n        name: \"\",\n        email: \"\",\n        // Add more form fields as needed\n      },\n      addresses: {\n        id: '', // Bind the 'name' input value to this property\n        name: '', // Bind the 'description' input value to this property\n      },\n      responseData: null,\n      error: null,\n      successModalVisible: false,\n      userID: '5', // Replace 'User123' with your user ID\n      userToken: 'UserToken123', // Replace 'UserToken123' with your user token\n      plcItems: [],\n      categorizedAddresses : {},\n      newAddressDescription: '',\n      newAddressName : '',\n      \n    }\n  },\n  mounted() {\n  // Making a GET request\n  axios.get('http://localhost:8089/plc')\n    .then(response => {\n      this.plcItems = response.data;\n\n      // Initialize an empty object to store the categorized addresses under IDs\n      const categorizedAddresses = {};\n\n      // Loop through the data array and categorize addresses under IDs\n      this.plcItems.forEach((item) => {\n        if (item.addresses && item.addresses.length > 0) {\n          // Add the addresses of the current item to the corresponding ID array\n          item.addresses.forEach((address) => {\n            if (address.id && address.name) {\n              // If the ID does not exist in the categorizedAddresses object, initialize an array for it\n              if (!categorizedAddresses[address.id]) {\n                categorizedAddresses[address.id] = [];\n              }\n\n              // Push the address details to the array under the corresponding ID\n              categorizedAddresses[address.id].push({\n                id: address.id,\n                name: address.name,\n                description: address.description,\n              });\n            }\n          });\n        }\n      });\n\n      // Now you have the categorized addresses under their IDs\n      console.log(\"Categorized Addresses:\", categorizedAddresses);\n\n      // Assign the categorized addresses to the component's data\n      this.categorizedAddresses = categorizedAddresses;\n    })\n    .catch(error => {\n      this.error = error.message;\n    });\n},\n\n  methods: {\n    showDeleteConfirmation(plcIndex, addressIndex, address) {\n    const confirmed = confirm(\"Are you sure you want to delete this address?\");\n    if (confirmed) {\n      this.deleteAddress(plcIndex, addressIndex,address);\n    }\n  },\n  //\n\n\n\n\n//\nsaveData() {\n      // Simulate saving data to the server (replace this with your actual API call)\n      // For example, using Axios:\n      // axios.post('/api/saveData', this.formData)\n      //   .then((response) => {\n      //     // Handle success\n      //     this.showSuccessModal();\n      //     // Clear the form data after successful submission\n      //     this.formData = {};\n      //   })\n      //   .catch((error) => {\n      //     // Handle error\n      //   });\n\n      // Simulate success for this example\n      this.showSuccessModal();\n      this.formData = {}; // Clear the form data after successful submission\n    },\n    showSuccessModal() {\n      this.successModalVisible = true;\n    },\n    closeSuccessModal() {\n      this.successModalVisible = false;\n    },\n  \n\n\n//\nfindPLCWithAddressId(addressId) {\n  for (let plcIndex = 0; plcIndex < this.plcItems.length; plcIndex++) {\n    const plc = this.plcItems[plcIndex];\n    for (let addressIndex = 0; addressIndex < plc.addresses.length; addressIndex++) {\n      if (plc.addresses[addressIndex].id === addressId) {\n        return { plcIndex, addressIndex };\n      }\n    }\n  }\n  return null; // Address ID not found in any PLC\n},\n\n    toggleDropdown(plcIndex) {\n          this.plcItems[plcIndex].showDropdown = !this.plcItems[plcIndex].showDropdown;\n        },\n        deletePLC(plcIndex) {\n           // Get the PLC ID from the PLC object to be deleted\n            const plcIdToDelete = this.plcItems[plcIndex].id;\n\n          // Make the DELETE request using Axios\n          axios.delete(`http://localhost:8089/plc/${plcIdToDelete}`)\n            .then(response => {\n              // If the request is successful, remove the PLC item from the array in the frontend\n              this.plcItems.splice(plcIndex, 1);\n            })\n            .catch(error => {\n              // Handle errors if needed\n              console.error('Error deleting PLC:', error);\n            });\n        },\n        addPLC() {\n      if (this.newPLCName.trim() !== '' && this.newPLCToken.trim() !== '') {\n        const isDuplicateToken = this.plcItems.some(\n          (plcItem) => plcItem.token === this.newPLCToken\n        );\n\n        if (isDuplicateToken) {\n          alert('Token is already used in another PLC. Please use a different token.');\n          return;\n        }\n\n        // Create the new PLC object\n        const newPLC = {\n          name: this.newPLCName,\n          token: this.newPLCToken,\n          editingToken: false,\n          newToken: '',\n          showDropdown: false,\n          addresses: [],\n          plc_userid: this.userID,\n        };\n\n        // Send a POST request to the server to create the new PLC\n        axios.post('http://localhost:8089/plc', newPLC)\n          .then(response => {\n            // Handle success and update the list of PLC items or perform any other actions as required\n            console.log('New PLC added successfully');\n            this.plcItems.push(response.data); // Assuming the server responds with the newly created PLC object\n          })\n          .catch(error => {\n            // Handle error, if needed\n            console.error('Error adding new PLC:', error);\n          });\n\n        this.newPLCName = '';\n        this.newPLCToken = '';\n      }\n    },\n    async addAddress(plcIndex) {\n  // Create a new address object\n      //console.log(plcIndex);\n      //console.log(this.plcItems[plcIndex]);\n      //plc.addresses.name\n      //console.log(plc.addresses.name);\n      //console.log(this.plc.addresses.description);\n\n      //console.log(newAddress.id);\n      /*\n        31/7/2023\n        Author: junxian428\n      */\n     //console.log(this.newAddressName);\n     //console.log(this.newAddressDescription);\n     //console.log(this.plcItems[plcIndex]);\n    // console.log(this.plcItems[plcIndex].id);\n\n     //\n\n      \n     try {\n      const plcId = this.plcItems[plcIndex].id; // Replace this with the correct PLC ID you want to update\n      const response = await axios.put(`http://localhost:8089/plc/${plcId}`, {\n        name: this.plcItems[plcIndex].name,\n        token: this.plcItems[plcIndex].token,\n        userid: this.userID,\n        addresses: [\n          {\n            name: this.newAddressName,\n            description: this.newAddressDescription,\n          },\n        ],\n      });\n\n      // The response data will contain the updated PLC information\n      //console.log(\"Updated PLC:\", response.data);\n      //console.log(\"Updated PLC:\", response.data.addresses[0].id);\n      // After successfully adding the address, you can update the local Vue data to reflect the changes\n      this.plcItems[plcIndex].addresses.push({\n        id: response.data.addresses[0].id,\n        name: this.newAddressName,\n        description: this.newAddressDescription,\n      });\n\n      // Clear the input fields after adding the address\n      this.newAddressName = \"\";\n      this.newAddressDescription = \"\";\n\n\n\n    } catch (error) {\n      console.error(\"Error updating PLC:\", error);\n    }\n    \n\n     //console.log(this.addresses.id);\n\n},\n//\n//This Function is for Update ADdress by getting Parent Node Attribute PLease dont not delete this.\n//\ncategorizedAddressesFindByAddressID(addressID) {\n    // Find the PLC that contains the address with the specified addressID\n    for (let plcIndex = 0; plcIndex < this.plcItems.length; plcIndex++) {\n      const plc = this.plcItems[plcIndex];\n      for (let addressIndex = 0; addressIndex < plc.addresses.length; addressIndex++) {\n        if (plc.addresses[addressIndex].id === addressID) {\n          return plc;\n        }\n      }\n    }\n    return null; // Return null if the address ID is not found in any PLC\n  },\n    async updatePLCAddress(addressIndex, plcIndex) {\n      //const plc = this.plcItems[plcIndex];\n      //console.log(this.categorizedAddresses[);\n      this.plcItems[plcIndex].addresses.pop();\n\n      try {\n        // First, push the new address to the addresses array of the corresponding PLC\n        //this.plcItems[plcIndex].addresses.push(newAddress);\n\n        // Perform the PUT request to update the address array on the server\n        const response = await axios.post(`http://localhost:8089/address`, {\n          userid: 1,\n          plcid: plcIndex,\n          \n        });\n\n        // Optionally, update the local data with the response from the server if needed\n        // this.plcItems[plcIndex].addresses = response.data.addresses;\n\n        console.log('PLC address updated successfully');\n      } catch (error) {\n        console.error('Error updating PLC address:', error);\n        // If there's an error during the PUT request, remove the newly added address from the local data\n        throw error; // Re-throw the error to be caught by the calling method (addAddress)\n      }\n    },\n\n    deleteAddress(addressIdToDelete,addressIndex, address) {\n      console.log(addressIdToDelete);\n      console.log(address);\n      console.log(this.findPLCWithAddressId(address.id));\n      //console.log(this.findPLCWithAddressId(address.id)['plcIndex']);\n      //console.log(this.plcItems);\n    // Make the DELETE request using Axios\n     axios.delete(`http://localhost:8089/address/${address.id}`).then(response => {\n        // If the request is successful, remove the address from the local Vue data\n        this.plcItems[this.findPLCWithAddressId(address.id)['plcIndex']].addresses.splice(addressIndex, 1);\n\n        console.log('Address deleted successfully:', response.data);\n      })\n      .catch(error => {\n        // Handle errors if needed\n        console.error('Error deleting address:', error);\n      });\n    \n  \n      // Find the PLC that contains the address with the specified Address ID\n      //console.log(addressIdToDelete); \n      //console.log(addressIdToDelete);\n      //console.log(addressIndex);\n      //console.log(this.plcItems[addressIdToDelete].token);\n      \n      //const address = this.categorizedAddresses[this.plcItems[addressIdToDelete].token];\n      //console.log(address[addressIndex]);\n      //console.log(address[addressIndex].id);\n\n            // Make the DELETE request using Axios\n        //    axios.delete(`http://localhost:8089/address/${address[addressIndex].id}`)\n          //  .then(response => {\n              // If the request is successful, remove the PLC item from the array in the frontend\n            //  console.log(addressIndex);\n              //this.address.pop(addressIndex, 1);\n              //this.address.splice(addressIndex, 1);\n              //this.plcItems[plcIndex].addresses.splice(addressIndex, 1);\n\n            //})\n            //.catch(error => {\n              // Handle errors if needed\n             // console.error('Error deleting PLC:', error);\n            //});\n\n\n      //console.log(this.categorizedAddresses[this.plcItems[addressIdToDelete].token[addressIndex]]);\n    },\n/*\n\n            deleteAddress(plcIndex, addressIndex) {\n          // Check if the PLC item exists at plcIndex\n\n          if (this.plcItems[plcIndex]) {\n            // Get the specified PLC item\n\n\n\n           // const plcItem = this.plcItems[plcIndex];\n            //\n           // console.log(plcItem.addresses.id);\n\n            // Check if the address exists at addressIndex within the addresses array of the PLC item\n            if (plcItem.addresses && plcItem.addresses.length > addressIndex) {\n              // Remove the address at addressIndex from the addresses array\n                        // Make the DELETE request using Axios\n                axios.delete(`http://localhost:8089/address/${addressIndex}`)\n                  .then(response => {\n                    // If the request is successful, remove the PLC item from the array in the frontend\n                    plcItems.addresses.splice(addressIndex, 1);\n                  })\n                  .catch(error => {\n                    // Handle errors if needed\n                    console.error('Error deleting PLC:', error);\n                  });\n\n            } else {\n              console.error('Invalid addressIndex:', addressIndex);\n            }\n          } else {\n            console.error('Invalid plcIndex:', plcIndex);\n          }\n        },\n        */\n\n        editAddress(address) {\n          address.editing = true;\n        },\n        async saveAddress(address,plcIndex,plc) {\n          address.editing = false;\n          console.log(address.id);\n          console.log(address.name);\n          console.log(address.description);\n          //console.log(plcIndex);\n          //console.log(address.description);\n          //console.log(this.plcItems);\n          //console.log(this.categorizedAddresses);\n          console.log(this.categorizedAddressesFindByAddressID(address.id));\n          const TargetPLC =  this.categorizedAddressesFindByAddressID(address.id);\n          console.log(TargetPLC.id);\n          console.log(TargetPLC.name);\n          console.log(TargetPLC.userid);\n          console.log(TargetPLC.token);\n\n          try {\n      // Assuming you have the TargetPLC object as the parent PLC of the address\n      const response = await axios.put(`http://localhost:8089/plc/${TargetPLC.id}`, {\n        name: TargetPLC.name,\n        token: TargetPLC.token,\n        userid: TargetPLC.userid,\n        addresses: [\n          {\n            id: address.id,\n            name: address.name,\n            description: address.description,\n          },\n        ],\n      });\n\n      // The response data will contain the updated PLC information\n      console.log(\"Updated PLC:\", response.data);\n\n      // After successfully saving the address, you can update the local Vue data to reflect the changes if needed\n      // For example, if the server returned an updated PLC object, you can replace the old PLC object in the array\n      //this.plcItems.splice(plcIndex, 1, response.data);\n    } catch (error) {\n      console.error(\"Error saving address:\", error);\n      // Handle the error as needed, e.g., show an error message to the user\n    }\n  \n\n  // ... (your other methods)\n\n\n\n          \n          //console.log(this.categorizedAddresses[\"OMRON 1234\"][0]);\n          //console.log(this.plcItems);\n          //const plcItem = this.plcItems[plcIndex];\n          //console.log(plcItem);\n          //\n\n        },\n        cancelEdit(address) {\n          address.editing = false;\n        },\n         async editPLCToken(plc) {\n          plc.editingToken = true;\n          console.log(plc.id);\n          //console.log(plc.newToken);\n          //\n\n          /*\n            try {\n              const plcId = this.plcItems[plcIndex].id; // Replace this with the correct PLC ID you want to update\n              const response = await axios.put(`http://localhost:8089/plc/${plcId}`, {\n                name: this.plcItems[plcIndex].name,\n                token: plc.token,\n                userid: this.userID,\n                addresses: this.addresses,\n              });\n\n              // The response data will contain the updated PLC information\n              //console.log(\"Updated PLC:\", response.data);\n              //console.log(\"Updated PLC:\", response.data.addresses[0].id);\n              // After successfully adding the address, you can update the local Vue data to reflect the changes\n              plc.newToken = plc.token;\n\n\n\n              } catch (error) {\n                console.error(\"Error updating PLC:\", error);\n              }\n\n              */\n\n\n\n          //\n        },\n\n       async savePLCToken(plc, plcIndex) {\n      // Check if the new token is not already used in any other PLC\n          const isDuplicateToken = this.plcItems.some(\n            (plcItem) => plcItem !== plc && plcItem.token === plc.newToken\n          );\n\n          if (isDuplicateToken) {\n            // Display an error message or take any action to handle the duplicate token\n            alert('Token is already used in another PLC. Please use a different token.');\n            return;\n          }\n\n\n \n\n          try {\n              const plcId = plc.id; // Replace this with the correct PLC ID you want to update\n              /*\n              const response = await axios.put(`http://localhost:8089/plc/updateToken/${plcId}`, {\n                name: plc.name,\n                token: plc.newToken,\n                userid: this.userID,\n                addresses: this.addresses\n          });\n          */\n          console.log(this.addresses);\n          plc.token = plc.newToken;\n          plc.editingToken = false;\n          plc.newToken = '';\n          this.showSuccessModal();\n            // The response data will contain the updated PLC information\n            //console.log(\"Updated PLC:\", response.data);\n            //console.log(\"Updated PLC:\", response.data.addresses[0].id);\n          } catch (error) {\n            console.error(\"Error updating PLC:\", error);\n          }\n    \n    },\n\n\n        cancelEditPLCToken(plc) {\n          plc.editingToken = false;\n          plc.newToken = '';\n        },\n\n        showDeletePLCConfirmation(plcIndex) {\n        const confirmed = confirm(\"Are you sure you want to delete this PLC?\");\n        if (confirmed) {\n          this.deletePLC(plcIndex);\n        }\n      },\n\n  },\n  \n}\n/** \nimport {onMounted, ref} from \"vue\";\nimport axios from \"axios\";\nimport {useRouter} from \"vue-router\";\nimport VueCookies from 'vue-cookies';\n\nexport default {\n  name: \"Home\",\n  data() {\n  return {\n    buttonImages: ['Config.png', 'Monitoring.png'],  // Replace with the paths to your button images\n    hoverEffects: [false, false]  // Track hover effects for each button\n  };\n},\nmethods: {\n  navigateToItems() {\n    this.$router.push(\"/Items\"); // Replace \"/Items\" with the desired route path\n  },\n  navigateToItems2() {\n    this.$router.push(\"/Monitor\"); // Replace \"/Items\" with the desired route path\n  },\n  toggleHoverEffect(index) {\n    this.hoverEffects[index - 1] = !this.hoverEffects[index - 1];\n  }\n},\n\n\n  setup() {\n    const message = ref('');\n    const router = useRouter();\n\n    /*\n    onMounted(async () => {\n      try {\n        const {data} = await axios.get('user');\n\n        message.value = `Hi ${data.name}`;\n      } catch (e) {\n        await router.push('/login');\n      }\n    });\n\n\n\n    \n    onMounted(async () => {\n      const sessionCookie = document.cookie.replace(\n        /(?:(?:^|.*;\\s*)access_Token\\s*\\=\\s*([^;]*).*$)|^.*$/,\n        '$1'\n      );\n      console.log(sessionCookie);\n      const logoutBtn = document.getElementById('logoutBtn');\n\n\n      //\n      if(sessionCookie != \"\"){\n        \n        console.log(\"logout button event attached\");\n        logoutBtn.addEventListener('click', logout);\n      } else{\n        logoutBtn.textContent = \"login\";\n        logoutBtn.addEventListener('click', login);\n        //message.value = `Please login your account`;\n\n      }\n      \n      //headers.append('Access-Control-Allow-Origin', 'http://localhost:3000');\n      //headers.append('Access-Control-Allow-Credentials', 'true');\n      try {\n        const response = await axios.get('http://localhost:8087/dashboard', {\n          headers: {\n            Authorization: `Bearer ${sessionCookie}`,\n            'Access-Control-Allow-Origin': '*'\n          },\n        });\n\n        const { data } = response;\n\n\n        //console.log(data);\n        //\n\n    \n        // Access the object properties\n        const username = data.username;\n        const blob = data.blob;\n\n        console.log(\"Username:\", username);\n        //console.log(\"Blob:\",  atob(blob));\n        VueCookies.set('blob_data',  blob, '7d'); // Save the access token in a cookie for 7 days\n\n        const blobCookie = document.cookie.replace(\n          /(?:(?:^|.*;\\s*)blob_data\\s*\\=\\s*([^;]*).*$)|^.*$/,\n          '$1'\n        );\n      //console.log(blobCookie);\n      //\n      // URL decoding\n      //var decodedValue = decodeURIComponent(blobCookie);\n\n      // Base64 decoding\n      //var base64DecodedValue = atob(decodedValue);\n      //console.log(base64DecodedValue);\n        //\n        message.value = `Username : ${data.username}`;\n        if(data.username === undefined){\n          message.value = \"Please login your account\";\n\n        }\n      } catch (error) {\n        console.error(error);\n        await router.push('/');\n      }\n    });\n    \n\n        function convertToLogin() {\n      logoutBtn.textContent = 'Login';\n      logoutBtn.removeEventListener('click', logout);\n      logoutBtn.addEventListener('click', login);\n    }\n          function login() {\n        // Perform login actions here\n        console.log('Login clicked');\n        router.push('/login');\n      }\n\n\n\n    const logout = async () => {\n      const sessionCookie = document.cookie.replace(\n        /(?:(?:^|.*;\\s*)access_Token\\s*\\=\\s*([^;]*).*$)|^.*$/,\n        '$1'\n      );\n      console.log(sessionCookie);\n\n      //\n\n      axios.post('http://')\n        .then(() => {\n          // Handle successful logout\n          // Clear any user-related data in your Vue.js application\n          // Redirect the user to the login page or any other desired route\n          console.log(\"success\");\n          sessionStorage.removeItem('access_Token');\n          document.cookie = \"access_Token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\n          localStorage.removeItem('access_Token');\n\n          message.value = `You are logout please login again`;\n          //\n\n          //\n          convertToLogin();\n          router.push('/login');\n\n        })\n        .catch(error => {\n          // Handle logout error\n          console.log(error);\n          router.push('/login');\n        });\n    }\n\n    return {\n      message,\n      logout\n    }\n\n\n\n  }\n}\n\n\n*/\n\n\n\n</script>\n\n<style>\n  .modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 9999; /* Set the z-index to place the modal on top */\n  }\n\n  .modal-content {\n    background-color: #fde2e8; /* Set the background color to white-pink */\n    border: 2px solid #ff1493; /* Add a 2px border with pink color */\n    padding: 20px;\n    border-radius: 5px;\n    color:black;\n  }\n\n\n  .modal-content button {\n    /* Add styles for the \"Close\" button */\n    border: 1px solid #000; /* Black border */\n    padding: 8px 12px; /* Adjust padding as needed */\n    background-color: #fff; /* White background */\n    color: #000; /* Black text color */\n    cursor: pointer;\n    border-radius: 5px;\n  }\n\n  .modal-content button:hover {\n    background-color: #000; /* Change background color on hover */\n    color: #fff; /* Change text color on hover */\n  }\n\n/* Styling for the black alert button */\n.dark-cancel-button {\n  padding: 10px 20px;\n  background-color: black; /* Change the background color to black */\n  color: white;\n  border: 2px solid darkgray; /* Change the border color to a darker shade of gray */\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n}\n\n/* On hover effect */\n.dark-cancel-button:hover {\n  background-color: darkgray; /* Change the hover background color to a darker shade of gray */\n}\n\n/* On click effect */\n.dark-cancel-button:active {\n  background-color: dimgray; /* Use a darker shade of gray on click */\n}\n\n\n\n/* Styling for the purple alert button */\n.purple-save-button {\n  padding: 10px 20px;\n  background-color: purple; /* Change the background color to purple */\n  color: white;\n  border: 2px solid darkpurple; /* Change the border color to a darker shade of purple */\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n}\n\n/* On hover effect */\n.purple-save-button:hover {\n  background-color: darkpurple; /* Change the hover background color to a darker shade of purple */\n}\n\n/* On click effect */\n.purple-save-button:active {\n  background-color: #800080; /* Use a darker shade of purple on click (here using hex code) */\n}\n\n\n\n\n/* Styling for the grass green alert button */\n.grass-green-add-button {\n  padding: 10px 20px;\n  background-color: #3CB371; /* Use your preferred grass green color code */\n  color: white;\n  border: 2px solid #2E8B57; /* Use a slightly darker shade of grass green for the border */\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n}\n\n/* On hover effect */\n.grass-green-add-button:hover {\n  background-color: #2E8B57; /* Use a slightly darker shade of grass green on hover */\n}\n\n/* On click effect */\n.grass-green-add-button:active {\n  background-color: #228B22; /* Use a darker shade of grass green on click */\n}\n\n\n/* Styling for the ocean blue alert button */\n.ocean-blue-edit-button {\n  padding: 10px 20px;\n  background-color: #007BAC; /* Use your preferred ocean blue color code */\n  color: white;\n  border: 2px solid #005A80; /* Use a slightly darker shade of ocean blue for the border */\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n}\n\n/* On hover effect */\n.ocean-blue-edit-button:hover {\n  background-color: #005A80; /* Use a slightly darker shade of ocean blue on hover */\n}\n\n/* On click effect */\n.ocean-blue-edit-button:active {\n  background-color: #00416A; /* Use a darker shade of ocean blue on click */\n}\n\n/* Styling for the red alert button */\n.red-alert-button {\n  padding: 10px 20px;\n  background-color: red;\n  color: white;\n  border: 2px solid darkred;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n}\n\n/* On hover effect */\n.red-alert-button:hover {\n  background-color: darkred;\n}\n\n/* On click effect */\n.red-alert-button:active {\n  background-color: crimson;\n}\n\n\n/* Sidebar styles */\n.sidebar {\n  height: 100%;\n  width: 200px;\n  position: fixed;\n  top: 0;\n  left: 0;\n  background-color: #111;\n  padding-top: 20px;\n}\n\n.sidebar a {\n  display: block;\n  color: white;\n  padding: 16px;\n  text-decoration: none;\n}\n\n.sidebar a:hover {\n  background-color: #ddd;\n  color: black;\n}\n\n/* Main content styles */\n.main {\n  margin-left: 200px; /* Same as the width of the sidebar */\n  padding: 20px;\n}\n\ntable {\n  border-collapse: collapse;\n  width: 100%;\n}\n\nth, td {\n  border: 1px solid black;\n  padding: 8px;\n  text-align: left;\n}\n\n\n/* Navbar styles */\n.navbar {\n  background-color: #333;\n  overflow: hidden;\n  width: 100%;\n  position: fixed; /* Position the navbar as fixed */\n  top: 0; /* Place the navbar at the top */\n  left: 200px; /* Align with the sidebar */\n  z-index: 2; /* Add z-index to position the navbar above the main content */\n}\n\n.navbar a {\n  float: left;\n  display: block;\n  color: white;\n  text-align: center;\n  padding: 14px 16px;\n  text-decoration: none;\n}\n\n.navbar a:hover {\n  background-color: #ddd;\n  color: black;\n}\n\n/* Right-aligned logout button */\n.logout {\n  display: flex;\n  align-items: center;\n}\n\n.logout a {\n  color: white;\n  padding: 14px 16px;\n  text-decoration: none;\n}\n\n.logout a:hover {\n  background-color: #ddd;\n  color: black;\n}\n\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}